/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  varchar,
  serial,
  timestamp,
  numeric,
  jsonb,
} from '@payloadcms/db-vercel-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-vercel-postgres/drizzle'

export const featured_featured_images = pgTable(
  'featured_featured_images',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('featured_featured_images_order_idx').on(columns._order),
    _parentIDIdx: index('featured_featured_images_parent_id_idx').on(columns._parentID),
    featured_featured_images_image_idx: index('featured_featured_images_image_idx').on(
      columns.image,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [featured.id],
      name: 'featured_featured_images_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const featured = pgTable(
  'featured',
  {
    id: serial('id').primaryKey(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    featured_updated_at_idx: index('featured_updated_at_idx').on(columns.updatedAt),
    featured_created_at_idx: index('featured_created_at_idx').on(columns.createdAt),
  }),
)

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
  }),
)

export const projects_images = pgTable(
  'projects_images',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('projects_images_order_idx').on(columns._order),
    _parentIDIdx: index('projects_images_parent_id_idx').on(columns._parentID),
    projects_images_image_idx: index('projects_images_image_idx').on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [projects.id],
      name: 'projects_images_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const projects = pgTable(
  'projects',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    description: varchar('description').notNull(),
    date: timestamp('date', { mode: 'string', withTimezone: true, precision: 3 }).notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    projects_updated_at_idx: index('projects_updated_at_idx').on(columns.updatedAt),
    projects_created_at_idx: index('projects_created_at_idx').on(columns.createdAt),
  }),
)

export const services_services = pgTable(
  'services_services',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    service: varchar('service'),
  },
  (columns) => ({
    _orderIdx: index('services_services_order_idx').on(columns._order),
    _parentIDIdx: index('services_services_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [services.id],
      name: 'services_services_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const services = pgTable(
  'services',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    description: varchar('description'),
    image: integer('image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    services_image_idx: index('services_image_idx').on(columns.image),
    services_updated_at_idx: index('services_updated_at_idx').on(columns.updatedAt),
    services_created_at_idx: index('services_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    featuredID: integer('featured_id'),
    usersID: integer('users_id'),
    mediaID: integer('media_id'),
    projectsID: integer('projects_id'),
    servicesID: integer('services_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_featured_id_idx: index(
      'payload_locked_documents_rels_featured_id_idx',
    ).on(columns.featuredID),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_projects_id_idx: index(
      'payload_locked_documents_rels_projects_id_idx',
    ).on(columns.projectsID),
    payload_locked_documents_rels_services_id_idx: index(
      'payload_locked_documents_rels_services_id_idx',
    ).on(columns.servicesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    featuredIdFk: foreignKey({
      columns: [columns['featuredID']],
      foreignColumns: [featured.id],
      name: 'payload_locked_documents_rels_featured_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    projectsIdFk: foreignKey({
      columns: [columns['projectsID']],
      foreignColumns: [projects.id],
      name: 'payload_locked_documents_rels_projects_fk',
    }).onDelete('cascade'),
    servicesIdFk: foreignKey({
      columns: [columns['servicesID']],
      foreignColumns: [services.id],
      name: 'payload_locked_documents_rels_services_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const home_page = pgTable(
  'home_page',
  {
    id: serial('id').primaryKey(),
    bgImage: integer('bg_image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    title: varchar('title'),
    subTitle: varchar('sub_title').notNull(),
    aboutTitle: varchar('about_title').notNull(),
    aboutImage: integer('about_image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    aboutText: varchar('about_text').notNull(),
    aboutRichText: jsonb('about_rich_text').notNull(),
    servicesTitle: varchar('services_title').notNull(),
    servicesText: varchar('services_text').notNull(),
    projectsTitle: varchar('projects_title').notNull(),
    projectsText: varchar('projects_text').notNull(),
    enquiryTitle: varchar('enquiry_title').notNull(),
    testimonialsTitle: varchar('testimonials_title').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    home_page_bg_image_idx: index('home_page_bg_image_idx').on(columns.bgImage),
    home_page_about_image_idx: index('home_page_about_image_idx').on(columns.aboutImage),
  }),
)

export const about_page = pgTable('about_page', {
  id: serial('id').primaryKey(),
  title: varchar('title').notNull(),
  text: varchar('text').notNull(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const services_page = pgTable('services_page', {
  id: serial('id').primaryKey(),
  title: varchar('title').notNull(),
  text: varchar('text').notNull(),
  enquiryTitle: varchar('enquiry_title').notNull(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const projects_page = pgTable('projects_page', {
  id: serial('id').primaryKey(),
  title: varchar('title').notNull(),
  text: varchar('text').notNull(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const relations_featured_featured_images = relations(
  featured_featured_images,
  ({ one }) => ({
    _parentID: one(featured, {
      fields: [featured_featured_images._parentID],
      references: [featured.id],
      relationName: 'featuredImages',
    }),
    image: one(media, {
      fields: [featured_featured_images.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations_featured = relations(featured, ({ many }) => ({
  featuredImages: many(featured_featured_images, {
    relationName: 'featuredImages',
  }),
}))
export const relations_users = relations(users, () => ({}))
export const relations_media = relations(media, () => ({}))
export const relations_projects_images = relations(projects_images, ({ one }) => ({
  _parentID: one(projects, {
    fields: [projects_images._parentID],
    references: [projects.id],
    relationName: 'images',
  }),
  image: one(media, {
    fields: [projects_images.image],
    references: [media.id],
    relationName: 'image',
  }),
}))
export const relations_projects = relations(projects, ({ many }) => ({
  images: many(projects_images, {
    relationName: 'images',
  }),
}))
export const relations_services_services = relations(services_services, ({ one }) => ({
  _parentID: one(services, {
    fields: [services_services._parentID],
    references: [services.id],
    relationName: 'services',
  }),
}))
export const relations_services = relations(services, ({ one, many }) => ({
  services: many(services_services, {
    relationName: 'services',
  }),
  image: one(media, {
    fields: [services.image],
    references: [media.id],
    relationName: 'image',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    featuredID: one(featured, {
      fields: [payload_locked_documents_rels.featuredID],
      references: [featured.id],
      relationName: 'featured',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    projectsID: one(projects, {
      fields: [payload_locked_documents_rels.projectsID],
      references: [projects.id],
      relationName: 'projects',
    }),
    servicesID: one(services, {
      fields: [payload_locked_documents_rels.servicesID],
      references: [services.id],
      relationName: 'services',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))
export const relations_home_page = relations(home_page, ({ one }) => ({
  bgImage: one(media, {
    fields: [home_page.bgImage],
    references: [media.id],
    relationName: 'bgImage',
  }),
  aboutImage: one(media, {
    fields: [home_page.aboutImage],
    references: [media.id],
    relationName: 'aboutImage',
  }),
}))
export const relations_about_page = relations(about_page, () => ({}))
export const relations_services_page = relations(services_page, () => ({}))
export const relations_projects_page = relations(projects_page, () => ({}))

type DatabaseSchema = {
  featured_featured_images: typeof featured_featured_images
  featured: typeof featured
  users: typeof users
  media: typeof media
  projects_images: typeof projects_images
  projects: typeof projects
  services_services: typeof services_services
  services: typeof services
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  home_page: typeof home_page
  about_page: typeof about_page
  services_page: typeof services_page
  projects_page: typeof projects_page
  relations_featured_featured_images: typeof relations_featured_featured_images
  relations_featured: typeof relations_featured
  relations_users: typeof relations_users
  relations_media: typeof relations_media
  relations_projects_images: typeof relations_projects_images
  relations_projects: typeof relations_projects
  relations_services_services: typeof relations_services_services
  relations_services: typeof relations_services
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
  relations_home_page: typeof relations_home_page
  relations_about_page: typeof relations_about_page
  relations_services_page: typeof relations_services_page
  relations_projects_page: typeof relations_projects_page
}

declare module '@payloadcms/db-vercel-postgres/types' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
